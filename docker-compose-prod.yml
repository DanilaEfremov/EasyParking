services:
  web:
    build:
      context: .
      dockerfile: ./app_conf/Dockerfile.${BUILD}
      args:
        BUILD_MOD: ${BUILD}
        APP_ROOT: /app
        DJANGO_USER: ${D_USER}
        DJANGO_USER_ID: ${D_USER_ID}
        DJANGO_GROUP: ${D_GROUP}
        DJANGO_GROUP_ID: ${D_GROUP_ID}
    container_name: web
#    user: "${D_USER_ID}:${D_GROUP_ID}"
    volumes:
      - static:/app/assets
      - logs:/app/logs
    expose:
      - "8000"
    depends_on:
      - db
      - minio
      - redis
    env_file:
      - .env.prod
#    tty: true
#    stdin_open: true


  minio:
    hostname: ${S3_HOST}
    restart: unless-stopped
    image: minio/minio
    container_name: minio
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data
#    ports:
#      - "${MINIO_PORT}:9000"  # API
#      - "9001:9001"           # Web UI
    expose:
      - "9000"  # API
      - "9001"  # Web UI
    env_file:
      - .env.prod
#    healthcheck:
#      test: [ "CMD", "mc", "ls", "django_minio" ]
#      interval: 30s
#      timeout: 10s
#      retries: 5


#  createbuckets:
#    image: minio/mc
#    depends_on:
#      - minio
#    entrypoint: >
#      /bin/sh -c "
#      mc alias set django_minio http://${S3_HOST}:${MINIO_PORT} ${MINIO_ROOT_USER} ${MINIO_ROOT_PASSWORD};
#      mc mb --ignore-existing django_minio/media;
#      mc anonymous set public django_minio/media;
#      exit 0;
#      "
#    env_file:
#      - .env


  db:
    hostname: ${DB_HOST}
    restart: unless-stopped
    image: postgres:17.4-alpine3.21
    container_name: db
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      LANG: ${LANGUAGE}.UTF-8
      LANGUAGE: ${LANGUAGE}.UTF-8
#      TZ: ${TZ}
    expose:
      - "5432"
    env_file:
      - .env.prod
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
#    deploy:
#      resources:
#        limits:
#          cpus: '1'
#          memory: 1G


  pgadmin:
    container_name: pgadmin_container
    image: dpage/pgadmin4:9.3
    volumes:
      - pgadmin-data:/var/lib/pgadmin
    expose:
      - '80'
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    depends_on:
      - db
#    deploy:
#      resources:
#        limits:
#          cpus: '0.5'
#          memory: 1G
    env_file:
      - .env.prod


  rabbitmq:
    hostname: ${RABBITMQ_HOST}
    restart: unless-stopped
    image: "rabbitmq:3-management-alpine"
    container_name: rabbitmq
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    expose:
      - "5672"     # API
#    ports:
      - "15672"  # Интерфейс управления RabbitMQ
    env_file:
      - .env.prod


  celery:
    restart: unless-stopped
    build:
      context: .
      dockerfile: ./app_conf/Dockerfile.${BUILD}
      args:
        BUILD_MOD: ${BUILD}
        APP_ROOT: /app
        DJANGO_USER: ${D_USER}
        DJANGO_USER_ID: ${D_USER_ID}
        DJANGO_GROUP: ${D_GROUP}
        DJANGO_GROUP_ID: ${D_GROUP_ID}
    container_name: celery_worker
    command: celery -A a_core worker --loglevel=info
    depends_on:
      - rabbitmq
      - web
    env_file:
      - .env.prod


  celery-beat:
    restart: unless-stopped
    build:
      context: .
      dockerfile: ./app_conf/Dockerfile.${BUILD}
      args:
        BUILD_MOD: ${BUILD}
        APP_ROOT: /app
        DJANGO_USER: ${D_USER}
        DJANGO_USER_ID: ${D_USER_ID}
        DJANGO_GROUP: ${D_GROUP}
        DJANGO_GROUP_ID: ${D_GROUP_ID}
    container_name: celery_beat
    command: celery -A a_core beat --loglevel=info --scheduler django_celery_beat.schedulers:DatabaseScheduler
    depends_on:
      - rabbitmq
      - web
      - celery
    volumes:
      - celerybeat-schedule:/app/celerybeat-schedule
    env_file:
      - .env.prod


  flower:
    restart: unless-stopped
    build:
      context: .
      dockerfile: ./app_conf/Dockerfile.${BUILD}
      args:
        BUILD_MOD: ${BUILD}
        APP_ROOT: /app
        DJANGO_USER: ${D_USER}
        DJANGO_USER_ID: ${D_USER_ID}
        DJANGO_GROUP: ${D_GROUP}
        DJANGO_GROUP_ID: ${D_GROUP_ID}
    container_name: flower
    hostname: flower
    command: celery -A a_core flower --port=5555
    depends_on:
      - rabbitmq
      - celery
      - celery-beat
    expose:
      - "5555"
    env_file:
      - .env.prod


  redis:
    hostname: ${CACHE_REDIS_HOST}
    restart: unless-stopped
    image: valkey/valkey:8.1.0-alpine3.21
    container_name: redis
    expose:
      - 6379
    env_file:
      - .env.prod
#    healthcheck:
#      test: [ "CMD", "redis-cli", "-a", "$REDIS_PASSWORD", "ping" ]
#      interval: 30s
#      timeout: 10s
#      retries: 5
#    deploy:
#      resources:
#        limits:
#          cpus: '0.50'
#          memory: 512M
#        reservations:
#          cpus: '0.25'
#          memory: 256M
    volumes:
      - redis_data:/data
    tty: true
    stdin_open: true


  angie:
    container_name: http
    hostname: http
    restart: unless-stopped
    image: docker.angie.software/angie:latest
    volumes:
      - ./app_conf/angie/angie.${BUILD}.conf:/etc/angie/angie.conf:ro
      - ./app_conf/angie/${BUILD}.htpasswd:/etc/angie/.htpasswd:ro
      - static:/usr/share/angie/static
#    post_start:
#      - command: [ "sh", "-c", "chown ${D_USER_ID} /usr/share/angie/static && chmod -R 755 /usr/share/angie/static" ]
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - web
      - flower
      - rabbitmq
      - pgadmin
      - minio
    env_file:
      - .env.prod


volumes:
  postgres_data:
  pgadmin-data:
  static:
  minio_data:
  rabbitmq_data:
  redis_data:
  logs:
  celerybeat-schedule:
